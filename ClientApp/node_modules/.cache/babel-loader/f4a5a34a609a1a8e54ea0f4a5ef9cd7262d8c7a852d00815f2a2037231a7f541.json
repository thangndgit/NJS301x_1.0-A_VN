{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MSI PC\\\\OneDrive\\\\Ta\\u0300i li\\xEA\\u0323u\\\\GitHub\\\\NJS301x_1.0-A_VN\\\\ClientApp\\\\src\\\\contexts\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useState } from \"react\";\nimport API from \"../constants/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/createContext();\n\n// Context for login state\nconst AuthContext = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  // Login state\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    // Get login state\n    fetch(API.GET_LOGIN, {\n      method: \"GET\",\n      credentials: \"include\"\n    }).then(res => res.json())\n    // Set login state\n    .then(data => setIsLoggedIn(data.isLoggedIn));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: [isLoggedIn, setIsLoggedIn],\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthContext, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = AuthContext;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthContext\");","map":{"version":3,"names":["createContext","useEffect","useState","API","Context","AuthContext","children","isLoggedIn","setIsLoggedIn","fetch","GET_LOGIN","method","credentials","then","res","json","data"],"sources":["C:/Users/MSI PC/OneDrive/Tài liệu/GitHub/NJS301x_1.0-A_VN/ClientApp/src/contexts/AuthContext.jsx"],"sourcesContent":["import { createContext, useEffect, useState } from \"react\";\r\nimport API from \"../constants/api\";\r\n\r\nconst Context = createContext();\r\n\r\n// Context for login state\r\nconst AuthContext = ({ children }) => {\r\n  // Login state\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Get login state\r\n    fetch(API.GET_LOGIN, {\r\n      method: \"GET\",\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      // Set login state\r\n      .then((data) => setIsLoggedIn(data.isLoggedIn));\r\n  }, []);\r\n\r\n  return (\r\n    <Context.Provider value={[isLoggedIn, setIsLoggedIn]}>\r\n      {children}\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,GAAG,MAAM,kBAAkB;AAAC;AAEnC,MAAMC,OAAO,gBAAGJ,aAAa,EAAE;;AAE/B;AACA,MAAMK,WAAW,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EAC/B;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAEnDD,SAAS,CAAC,MAAM;IACd;IACAQ,KAAK,CAACN,GAAG,CAACO,SAAS,EAAE;MACnBC,MAAM,EAAE,KAAK;MACbC,WAAW,EAAE;IACf,CAAC,CAAC,CACCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE;IACzB;IAAA,CACCF,IAAI,CAAEG,IAAI,IAAKR,aAAa,CAACQ,IAAI,CAACT,UAAU,CAAC,CAAC;EACnD,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE,QAAC,OAAO,CAAC,QAAQ;IAAC,KAAK,EAAE,CAACA,UAAU,EAAEC,aAAa,CAAE;IAAA,UAClDF;EAAQ;IAAA;IAAA;IAAA;EAAA,QACQ;AAEvB,CAAC;AAAC,GApBID,WAAW;AAAA,KAAXA,WAAW;AAsBjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}