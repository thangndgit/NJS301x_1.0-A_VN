{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst USERS_KEY = \"users_key\";\nconst CURRENT_USER_KEY = \"current_user_key\";\n\n// Get user\nconst getUser = () => {\n  const users = JSON.parse(localStorage.getItem(USERS_KEY)) || [];\n  const currentUser = JSON.parse(localStorage.getItem(CURRENT_USER_KEY));\n  return [users, currentUser];\n};\n\n// Convert proxy to state\nconst convertState = state => JSON.parse(JSON.stringify(state));\n\n// Load auth state from localStorage\nconst loadState = () => {\n  const currentUser = JSON.parse(localStorage.getItem(CURRENT_USER_KEY));\n  // If does not have current\n  if (!currentUser) return {\n    items: []\n  };\n  // If have current\n  return {\n    items: currentUser.items\n  };\n};\n\n// Save state to localStorage\nconst saveState = items => {\n  // Get users from storage\n  const [users, currentUser] = getUser();\n\n  // Update user\n  currentUser.items = items;\n\n  // Update users\n  const indexCurrent = users.findIndex(user => user.email === currentUser.email);\n  users[indexCurrent] = currentUser;\n\n  // Save users\n  localStorage.setItem(USERS_KEY, JSON.stringify(users));\n  localStorage.setItem(CURRENT_USER_KEY, JSON.stringify(currentUser));\n};\nconst initialState = loadState();\nconst slice = createSlice({\n  name: \"cart\",\n  initialState: initialState,\n  reducers: {\n    reset() {\n      return loadState();\n    },\n    add(state, action) {\n      // Get payload data\n      const info = action.payload.info;\n      const quantity = action.payload.quantity;\n      // Find index of this item\n      const index = state.items.findIndex(item => item.info._id.$oid === info._id.$oid);\n      // If this item is not in cart, add it\n      if (index === -1) state.items.push({\n        info,\n        quantity\n      });\n      // Else update its quantity\n      else state.items[index].quantity += quantity;\n      // Save current state to localStorage\n      saveState(convertState(state).items);\n    },\n    update(state, action) {\n      // Get payload data\n      const itemId = action.payload.itemId;\n      const quantity = action.payload.quantity;\n      // Find index of this item\n      const index = state.items.findIndex(item => item.info._id.$oid === itemId);\n      // If quantity = 0, delete item\n      if (quantity === 0) state.items.splice(index, 1);\n      // Else update its quantity\n      else state.items[index].quantity = quantity;\n      // Save current state to localStorage\n      saveState(convertState(state).items);\n    },\n    delete(state, action) {\n      // Get payload from data\n      const itemId = action.payload.itemId;\n      // Find index of this item\n      const index = state.items.findIndex(item => item.info._id.$oid === itemId);\n      // Delete item\n      state.items.splice(index, 1);\n      // Save current state to local storage\n      saveState(convertState(state).items);\n    }\n  }\n});\nexport const cartActions = slice.actions;\nexport default slice.reducer;","map":{"version":3,"names":["createSlice","USERS_KEY","CURRENT_USER_KEY","getUser","users","JSON","parse","localStorage","getItem","currentUser","convertState","state","stringify","loadState","items","saveState","indexCurrent","findIndex","user","email","setItem","initialState","slice","name","reducers","reset","add","action","info","payload","quantity","index","item","_id","$oid","push","update","itemId","splice","delete","cartActions","actions","reducer"],"sources":["D:/GitHub/NJS301x_1.0-A_VN/ClientApp/src/store/reducers/cart.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst USERS_KEY = \"users_key\";\r\nconst CURRENT_USER_KEY = \"current_user_key\";\r\n\r\n// Get user\r\nconst getUser = () => {\r\n  const users = JSON.parse(localStorage.getItem(USERS_KEY)) || [];\r\n  const currentUser = JSON.parse(localStorage.getItem(CURRENT_USER_KEY));\r\n  return [users, currentUser];\r\n};\r\n\r\n// Convert proxy to state\r\nconst convertState = (state) => JSON.parse(JSON.stringify(state));\r\n\r\n// Load auth state from localStorage\r\nconst loadState = () => {\r\n  const currentUser = JSON.parse(localStorage.getItem(CURRENT_USER_KEY));\r\n  // If does not have current\r\n  if (!currentUser) return { items: [] };\r\n  // If have current\r\n  return { items: currentUser.items };\r\n};\r\n\r\n// Save state to localStorage\r\nconst saveState = (items) => {\r\n  // Get users from storage\r\n  const [users, currentUser] = getUser();\r\n\r\n  // Update user\r\n  currentUser.items = items;\r\n\r\n  // Update users\r\n  const indexCurrent = users.findIndex(\r\n    (user) => user.email === currentUser.email\r\n  );\r\n  users[indexCurrent] = currentUser;\r\n\r\n  // Save users\r\n  localStorage.setItem(USERS_KEY, JSON.stringify(users));\r\n  localStorage.setItem(CURRENT_USER_KEY, JSON.stringify(currentUser));\r\n};\r\n\r\nconst initialState = loadState();\r\n\r\nconst slice = createSlice({\r\n  name: \"cart\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    reset() {\r\n      return loadState();\r\n    },\r\n    add(state, action) {\r\n      // Get payload data\r\n      const info = action.payload.info;\r\n      const quantity = action.payload.quantity;\r\n      // Find index of this item\r\n      const index = state.items.findIndex(\r\n        (item) => item.info._id.$oid === info._id.$oid\r\n      );\r\n      // If this item is not in cart, add it\r\n      if (index === -1) state.items.push({ info, quantity });\r\n      // Else update its quantity\r\n      else state.items[index].quantity += quantity;\r\n      // Save current state to localStorage\r\n      saveState(convertState(state).items);\r\n    },\r\n    update(state, action) {\r\n      // Get payload data\r\n      const itemId = action.payload.itemId;\r\n      const quantity = action.payload.quantity;\r\n      // Find index of this item\r\n      const index = state.items.findIndex(\r\n        (item) => item.info._id.$oid === itemId\r\n      );\r\n      // If quantity = 0, delete item\r\n      if (quantity === 0) state.items.splice(index, 1);\r\n      // Else update its quantity\r\n      else state.items[index].quantity = quantity;\r\n      // Save current state to localStorage\r\n      saveState(convertState(state).items);\r\n    },\r\n    delete(state, action) {\r\n      // Get payload from data\r\n      const itemId = action.payload.itemId;\r\n      // Find index of this item\r\n      const index = state.items.findIndex(\r\n        (item) => item.info._id.$oid === itemId\r\n      );\r\n      // Delete item\r\n      state.items.splice(index, 1);\r\n      // Save current state to local storage\r\n      saveState(convertState(state).items);\r\n    },\r\n  },\r\n});\r\n\r\nexport const cartActions = slice.actions;\r\nexport default slice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}